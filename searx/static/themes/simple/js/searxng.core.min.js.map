{"version":3,"mappings":"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","names":["assertElement: AssertElement","endpoint: EndpointsKeys","settings: Settings"],"ignoreList":[],"sources":["../../../../../client/simple/src/js/core/util/assertElement.ts","../../../../../client/simple/src/js/core/util/getElement.ts","../../../../../client/simple/src/js/core/toolkit.ts","../../../../../client/simple/src/js/core/listener.ts","../../../../../client/simple/src/js/core/Plugin.ts","../../../../../client/simple/src/js/core/loader.ts","../../../../../client/simple/src/js/core/router.ts"],"sourcesContent":["// SPDX-License-Identifier: AGPL-3.0-or-later\n\ntype AssertElement = <T>(element?: T | null) => asserts element is T;\nexport const assertElement: AssertElement = <T>(element?: T | null): asserts element is T => {\n  if (!element) {\n    throw new Error(\"DOM element not found\");\n  }\n};\n","// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { assertElement } from \"./assertElement.ts\";\n\ntype Options = {\n  assert?: boolean;\n};\n\nexport function getElement<T>(id: string, options?: { assert: true }): T;\nexport function getElement<T>(id: string, options?: { assert: false }): T | null;\nexport function getElement<T>(id: string, options: Options = {}): T | null {\n  options.assert ??= true;\n\n  const element = document.getElementById(id) as T | null;\n\n  if (options.assert) {\n    assertElement(element);\n  }\n\n  return element;\n}\n","// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport type { KeyBindingLayout } from \"../main/keyboard.ts\";\n\n// synced with searx/webapp.py get_client_settings\ntype Settings = {\n  advanced_search?: boolean;\n  autocomplete?: string;\n  autocomplete_min?: number;\n  doi_resolver?: string;\n  favicon_resolver?: string;\n  hotkeys?: KeyBindingLayout;\n  infinite_scroll?: boolean;\n  method?: \"GET\" | \"POST\";\n  query_in_title?: boolean;\n  results_on_new_tab?: boolean;\n  safesearch?: 0 | 1 | 2;\n  search_on_category_select?: boolean;\n  theme?: string;\n  theme_static_path?: string;\n  translations?: Record<string, string>;\n  url_formatting?: \"pretty\" | \"full\" | \"host\";\n};\n\ntype HTTPOptions = {\n  body?: BodyInit;\n  timeout?: number;\n};\n\ntype ReadyOptions = {\n  // all values must be truthy for the callback to be executed\n  on?: (boolean | undefined)[];\n};\n\nexport type EndpointsKeys = keyof typeof Endpoints;\n\nexport const Endpoints = {\n  index: \"index\",\n  results: \"results\",\n  preferences: \"preferences\",\n  unknown: \"unknown\"\n} as const;\n\nexport const mutable = {\n  closeDetail: undefined as (() => void) | undefined,\n  scrollPageToSelected: undefined as (() => void) | undefined,\n  selectImage: undefined as ((resultElement: HTMLElement) => void) | undefined,\n  selectNext: undefined as ((openDetailView?: boolean) => void) | undefined,\n  selectPrevious: undefined as ((openDetailView?: boolean) => void) | undefined\n};\n\nconst getEndpoint = (): EndpointsKeys => {\n  const metaEndpoint = document.querySelector('meta[name=\"endpoint\"]')?.getAttribute(\"content\");\n\n  if (metaEndpoint && metaEndpoint in Endpoints) {\n    return metaEndpoint as EndpointsKeys;\n  }\n\n  return Endpoints.unknown;\n};\n\nconst getSettings = (): Settings => {\n  const settings = document.querySelector(\"script[client_settings]\")?.getAttribute(\"client_settings\");\n  if (!settings) return {};\n\n  try {\n    return JSON.parse(atob(settings));\n  } catch (error) {\n    console.error(\"Failed to load client_settings:\", error);\n    return {};\n  }\n};\n\nexport const http = async (method: string, url: string | URL, options?: HTTPOptions): Promise<Response> => {\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), options?.timeout ?? 30_000);\n\n  const res = await fetch(url, {\n    body: options?.body,\n    method: method,\n    signal: controller.signal\n  }).finally(() => clearTimeout(timeoutId));\n  if (!res.ok) {\n    throw new Error(res.statusText);\n  }\n\n  return res;\n};\n\nexport const listen = <K extends keyof DocumentEventMap, E extends HTMLElement>(\n  type: string | K,\n  target: string | Document | E,\n  listener: (this: E, event: DocumentEventMap[K]) => void | Promise<void>,\n  options?: AddEventListenerOptions\n): void => {\n  if (typeof target !== \"string\") {\n    target.addEventListener(type, listener as EventListener, options);\n    return;\n  }\n\n  document.addEventListener(\n    type,\n    (event: Event) => {\n      for (const node of event.composedPath()) {\n        if (node instanceof HTMLElement && node.matches(target)) {\n          try {\n            listener.call(node as E, event as DocumentEventMap[K]);\n          } catch (error) {\n            console.error(error);\n          }\n          break;\n        }\n      }\n    },\n    options\n  );\n};\n\nexport const ready = (callback: () => void, options?: ReadyOptions): void => {\n  for (const condition of options?.on ?? []) {\n    if (!condition) {\n      return;\n    }\n  }\n\n  if (document.readyState !== \"loading\") {\n    callback();\n  } else {\n    listen(\"DOMContentLoaded\", document, callback, { once: true });\n  }\n};\n\nexport const endpoint: EndpointsKeys = getEndpoint();\nexport const settings: Settings = getSettings();\n","// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { listen } from \"./toolkit.ts\";\n\nlisten(\"click\", \".close\", function (this: HTMLElement) {\n  (this.parentNode as HTMLElement)?.classList.add(\"invisible\");\n});\n","// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { getElement } from \"./util/getElement.ts\";\n\nexport abstract class Plugin {\n  protected abstract readonly name: string;\n\n  public constructor() {\n    void this.invoke();\n  }\n\n  private async invoke(): Promise<void> {\n    try {\n      const response = await this.do();\n\n      console.debug(`[PLUGIN] ${this.name}: OK`);\n\n      if (!response) return;\n      if (response instanceof HTMLElement || typeof response === \"string\" || typeof response === \"number\") {\n        await this.insertAnswerContainer(response);\n      }\n    } catch (error) {\n      console.error(`[PLUGIN] ${this.name}:`, error);\n    }\n  }\n\n  protected abstract do(): Promise<unknown> | unknown;\n\n  private async insertAnswerContainer(element: HTMLElement | string | number): Promise<void> {\n    const results = getElement<HTMLDivElement>(\"results\");\n\n    // ./searx/templates/elements/answers.html\n    let answers = getElement<HTMLDivElement>(\"answers\", { assert: false });\n    if (!answers) {\n      // what is this?\n      const answersTitle = document.createElement(\"h4\");\n      answersTitle.setAttribute(\"class\", \"title\");\n      answersTitle.setAttribute(\"id\", \"answers-title\");\n      answersTitle.textContent = \"Answers : \";\n\n      answers = document.createElement(\"div\");\n      answers.setAttribute(\"id\", \"answers\");\n      answers.setAttribute(\"role\", \"complementary\");\n      answers.setAttribute(\"aria-labelledby\", \"answers-title\");\n      answers.appendChild(answersTitle);\n    }\n\n    if (!(element instanceof HTMLElement)) {\n      const span = document.createElement(\"span\");\n      span.innerHTML = element.toString();\n      // biome-ignore lint/style/noParameterAssign: TODO\n      element = span;\n    }\n\n    answers.appendChild(element);\n\n    results.insertAdjacentElement(\"afterbegin\", answers);\n  }\n}\n","// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport type { Plugin } from \"./Plugin.ts\";\nimport { type EndpointsKeys, endpoint } from \"./toolkit.ts\";\n\ntype Options = { on: \"global\" } | { on: \"endpoint\"; where: EndpointsKeys | EndpointsKeys[] };\n\nexport const load = async <T extends Plugin>(\n  Plugin: () => Promise<{ default: new () => T }>,\n  options: Options\n): Promise<void> => {\n  check(options).catch((why) => {\n    console.debug(\"Load condition failed:\", why);\n  });\n\n  new (await Plugin()).default();\n};\n\nconst check = async (options: Options): Promise<void> => {\n  switch (options.on) {\n    case \"global\": {\n      return;\n    }\n    case \"endpoint\": {\n      if (\n        (typeof options.where === \"string\" && options.where !== endpoint) ||\n        (Array.isArray(options.where) && !options.where.includes(endpoint))\n      ) {\n        throw new Error(\"not on the expected endpoint\");\n      }\n\n      return;\n    }\n    default:\n      throw new Error(`unhandled \"on\" trigger`);\n  }\n};\n","// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { load } from \"./loader.ts\";\nimport { Endpoints, endpoint, ready, settings } from \"./toolkit.ts\";\n\nready(() => {\n  document.documentElement.classList.remove(\"no-js\");\n  document.documentElement.classList.add(\"js\");\n\n  void load(() => import(\"../plugin/QueryPlugin.ts\"), {\n    on: \"endpoint\",\n    where: Endpoints.results\n  });\n\n  if (settings.infinite_scroll) {\n    void load(() => import(\"../plugin/InfiniteScrollPlugin.ts\"), {\n      on: \"endpoint\",\n      where: Endpoints.results\n    });\n  }\n});\n\nready(\n  () => {\n    void import(\"../main/keyboard.ts\");\n    void import(\"../main/search.ts\");\n\n    if (settings.autocomplete) {\n      void import(\"../main/autocomplete.ts\");\n    }\n  },\n  { on: [endpoint === Endpoints.index] }\n);\n\nready(\n  () => {\n    void import(\"../main/keyboard.ts\");\n    void import(\"../main/mapresult.ts\");\n    void import(\"../main/results.ts\");\n    void import(\"../main/search.ts\");\n\n    if (settings.autocomplete) {\n      void import(\"../main/autocomplete.ts\");\n    }\n  },\n  { on: [endpoint === Endpoints.results] }\n);\n\nready(\n  () => {\n    void import(\"../main/preferences.ts\");\n  },\n  { on: [endpoint === Endpoints.preferences] }\n);\n"],"file":"searxng.core.min.js"}