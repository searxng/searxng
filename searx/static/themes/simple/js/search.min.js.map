{"version":3,"file":"search.min.js","names":["isMobile: boolean","isResultsPage: boolean","categoryButtons: HTMLButtonElement[]","form: HTMLFormElement | null"],"sources":["../../../../../client/simple/src/js/main/search.ts"],"sourcesContent":["// SPDX-License-Identifier: AGPL-3.0-or-later\n\nimport { assertElement, listen, settings } from \"../core/toolkit.ts\";\n\nconst submitIfQuery = (qInput: HTMLInputElement): void => {\n  if (qInput.value.length > 0) {\n    const search = document.getElementById(\"search\") as HTMLFormElement | null;\n    search?.submit();\n  }\n};\n\nconst updateClearButton = (qInput: HTMLInputElement, cs: HTMLElement): void => {\n  cs.classList.toggle(\"empty\", qInput.value.length === 0);\n};\n\nconst createClearButton = (qInput: HTMLInputElement): void => {\n  const cs = document.getElementById(\"clear_search\");\n  assertElement(cs);\n\n  updateClearButton(qInput, cs);\n\n  listen(\"click\", cs, (event: MouseEvent) => {\n    event.preventDefault();\n    qInput.value = \"\";\n    qInput.focus();\n    updateClearButton(qInput, cs);\n  });\n\n  listen(\"input\", qInput, () => updateClearButton(qInput, cs), { passive: true });\n};\n\nconst qInput = document.getElementById(\"q\") as HTMLInputElement | null;\nassertElement(qInput);\n\nconst isMobile: boolean = window.matchMedia(\"(max-width: 50em)\").matches;\nconst isResultsPage: boolean = document.querySelector(\"main\")?.id === \"main_results\";\n\n// focus search input on large screens\nif (!(isMobile || isResultsPage)) {\n  qInput.focus();\n}\n\n// On mobile, move cursor to the end of the input on focus\nif (isMobile) {\n  listen(\"focus\", qInput, () => {\n    // Defer cursor move until the next frame to prevent a visual jump\n    requestAnimationFrame(() => {\n      const end = qInput.value.length;\n      qInput.setSelectionRange(end, end);\n      qInput.scrollLeft = qInput.scrollWidth;\n    });\n  });\n}\n\ncreateClearButton(qInput);\n\n// Additionally to searching when selecting a new category, we also\n// automatically start a new search request when the user changes a search\n// filter (safesearch, time range or language) (this requires JavaScript\n// though)\nif (\n  settings.search_on_category_select &&\n  // If .search_filters is undefined (invisible) we are on the homepage and\n  // hence don't have to set any listeners\n  document.querySelector(\".search_filters\")\n) {\n  const safesearchElement = document.getElementById(\"safesearch\");\n  if (safesearchElement) {\n    listen(\"change\", safesearchElement, () => submitIfQuery(qInput));\n  }\n\n  const timeRangeElement = document.getElementById(\"time_range\");\n  if (timeRangeElement) {\n    listen(\"change\", timeRangeElement, () => submitIfQuery(qInput));\n  }\n\n  const languageElement = document.getElementById(\"language\");\n  if (languageElement) {\n    listen(\"change\", languageElement, () => submitIfQuery(qInput));\n  }\n}\n\nconst categoryButtons: HTMLButtonElement[] = [\n  ...document.querySelectorAll<HTMLButtonElement>(\"button.category_button\")\n];\nfor (const button of categoryButtons) {\n  listen(\"click\", button, (event: MouseEvent) => {\n    if (event.shiftKey) {\n      event.preventDefault();\n      button.classList.toggle(\"selected\");\n      return;\n    }\n\n    // deselect all other categories\n    for (const categoryButton of categoryButtons) {\n      categoryButton.classList.toggle(\"selected\", categoryButton === button);\n    }\n  });\n}\n\nconst form: HTMLFormElement | null = document.querySelector<HTMLFormElement>(\"#search\");\nassertElement(form);\n\n// override form submit action to update the actually selected categories\nlisten(\"submit\", form, (event: Event) => {\n  event.preventDefault();\n\n  const categoryValuesInput = document.querySelector<HTMLInputElement>(\"#selected-categories\");\n  if (categoryValuesInput) {\n    const categoryValues = categoryButtons\n      .filter((button) => button.classList.contains(\"selected\"))\n      .map((button) => button.name.replace(\"category_\", \"\"));\n\n    categoryValuesInput.value = categoryValues.join(\",\");\n  }\n\n  form.submit();\n});\n"],"mappings":"wDAIA,IAAM,EAAiB,GAAmC,CACpD,EAAO,MAAM,OAAS,GACT,SAAS,eAAe,SAAS,EACxC,QAAQ,EAId,GAAqB,EAA0B,IAA0B,CAC7E,EAAG,UAAU,OAAO,QAAS,EAAO,MAAM,SAAW,EAAE,EAGnD,EAAqB,GAAmC,CAC5D,IAAM,EAAK,SAAS,eAAe,eAAe,CAClD,EAAc,EAAG,CAEjB,EAAkB,EAAQ,EAAG,CAE7B,EAAO,QAAS,EAAK,GAAsB,CACzC,EAAM,gBAAgB,CACtB,EAAO,MAAQ,GACf,EAAO,OAAO,CACd,EAAkB,EAAQ,EAAG,EAC7B,CAEF,EAAO,QAAS,MAAc,EAAkB,EAAQ,EAAG,CAAE,CAAE,QAAS,GAAM,CAAC,EAG3E,EAAS,SAAS,eAAe,IAAI,CAC3C,EAAc,EAAO,CAErB,IAAMA,EAAoB,OAAO,WAAW,oBAAoB,CAAC,QAC3DC,EAAyB,SAAS,cAAc,OAAO,EAAE,KAAO,eAyBtE,GAtBM,GAAY,GAChB,EAAO,OAAO,CAIZ,GACF,EAAO,QAAS,MAAc,CAE5B,0BAA4B,CAC1B,IAAM,EAAM,EAAO,MAAM,OACzB,EAAO,kBAAkB,EAAK,EAAI,CAClC,EAAO,WAAa,EAAO,aAC3B,EACF,CAGJ,EAAkB,EAAO,CAOvB,EAAS,2BAGT,SAAS,cAAc,kBAAkB,CACzC,CACA,IAAM,EAAoB,SAAS,eAAe,aAAa,CAC3D,GACF,EAAO,SAAU,MAAyB,EAAc,EAAO,CAAC,CAGlE,IAAM,EAAmB,SAAS,eAAe,aAAa,CAC1D,GACF,EAAO,SAAU,MAAwB,EAAc,EAAO,CAAC,CAGjE,IAAM,EAAkB,SAAS,eAAe,WAAW,CACvD,GACF,EAAO,SAAU,MAAuB,EAAc,EAAO,CAAC,CAIlE,IAAMC,EAAuC,CAC3C,GAAG,SAAS,iBAAoC,yBAAyB,CAC1E,CACD,IAAK,IAAM,KAAU,EACnB,EAAO,QAAS,EAAS,GAAsB,CAC7C,GAAI,EAAM,SAAU,CAClB,EAAM,gBAAgB,CACtB,EAAO,UAAU,OAAO,WAAW,CACnC,OAIF,IAAK,IAAM,KAAkB,EAC3B,EAAe,UAAU,OAAO,WAAY,IAAmB,EAAO,EAExE,CAGJ,IAAMC,EAA+B,SAAS,cAA+B,UAAU,CACvF,EAAc,EAAK,CAGnB,EAAO,SAAU,EAAO,GAAiB,CACvC,EAAM,gBAAgB,CAEtB,IAAM,EAAsB,SAAS,cAAgC,uBAAuB,CACxF,IAKF,EAAoB,MAJG,EACpB,OAAQ,GAAW,EAAO,UAAU,SAAS,WAAW,CAAC,CACzD,IAAK,GAAW,EAAO,KAAK,QAAQ,YAAa,GAAG,CAAC,CAEb,KAAK,IAAI,EAGtD,EAAK,QAAQ,EACb"}